from __future__ import annotations

from collections.abc import Callable
from typing import Any

class Typer:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def command(self, *args: Any, **kwargs: Any) -> Callable[..., Any]: ...
    def callback(self, *args: Any, **kwargs: Any) -> Callable[..., Any]: ...
    def add_typer(self, *args: Any, **kwargs: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...

class Context:
    obj: Any | None

class Exit(SystemExit):
    code: Any

class BadParameter(Exception):
    message: str

def echo(*args: Any, **kwargs: Any) -> None: ...
def Option(*args: Any, **kwargs: Any) -> Any: ...
def Argument(*args: Any, **kwargs: Any) -> Any: ...
